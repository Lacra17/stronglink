#!/usr/bin/env node
// Copyright 2014-2015 Ben Trask
// MIT licensed (see LICENSE for details)

var fs = require("fs");
var pathmodule = require("path");
var sln = require("../sln-client");
var repo = sln.mainRepo();

if(process.argv[2] && "-" === process.argv[2][0]) {
	console.debug("Usage: sln-extract-metadata [blacklist] [whitelist]");
	process.exit(1);
}

var blacklist = readURIListSync(process.argv[2]);
var whitelist = readURIListSync(process.argv[3]);

function has(obj, prop) {
	return Object.prototype.hasOwnProperty.call(obj, prop);
}
function any(obj) {
	for(var x in obj) if(has(obj, x)) return obj[x];
	return null;
}
function readURIListSync(path) {
	if(!path || "" === path) return {};
	var text = fs.readFileSync(pathmodule.resolve(path), "utf8");
	var list = sln.parseURIList(text);
	var map = {}, i;
	for(i = 0; i < list.length; i++) map[list[i]] = 1;
	return map;
}
function texttype(type) {
	if("text/plain" === type) return true;
	if("text/plain; charset=utf-8" === type) return true;
	if("text/markdown" === type) return true;
	if("text/markdown; charset=utf-8" === type) return true;
	if("text/x-markdown" === type) return true;
	if("text/x-markdown; charset=utf-8" === type) return true;
	return false;
}
function array2obj(array) {
	var obj = {};
	for(var i = 0; i < array.length; i++) {
		obj[array[i]] = {};
	}
	return obj;
}


// Note: This code is tuned for my personal notes, and isn't likely to be widely
// applicable unless you happen to use the same conventions.

function parsetopic(body) {
	var topic = /^([^\r\n]+)(?:\r\n|\r|\n){2}/.exec(body);
	if(!topic) return null;
	topic = topic[1];
	if(/^(>|#|\\#)/.test(topic)) return null;
	if(/[.?!:]$/.test(topic)) return null;
	if(/^[\w][\w\d-]*:[\S]/.test(topic)) return null;
	var date = /\b\d\d\d\d--?\d\d-\d\d\d?\b/; // -- and ddd for typos
	var x = date.exec(topic);
	if(x) return x.index > 0 ? topic.slice(0, x.index).trim() : null;
	if(topic.length > 40) return null; // our topics are always short
	return topic.trim();
}
function parsedates(body) {
	var results = [];
	var date = /\b(\d\d\d\d)--?(\d\d)-(\d\d)(?: (\d\d?):(\d\d)(?::(\d\d))?(?: ?(AM|PM))?)?/gi;
	var x;
	for(;;) {
		x = date.exec(body);
		if(!x) break;
		var yyyy = +x[1];
		var mm = +x[2];
		var dd = +x[3];
		var HH = +x[4]||0;
		var MM = +x[5]||0;
		var SS = +x[6]||0;
		if(x[7]) HH %= 12;
		if(/PM/i.test(x[7])) HH += 12;
		results.push(new Date(yyyy, mm-1, dd, HH, MM, SS).toISOString());
	}
	return results;
}
function parsephonenumbers(body) {
	var results = [];
	var phone = /(?:\b(?:1-)?\d\d\d-|\(\d\d\d\) )\d\d\d-\d\d\d\d\b/g; // US only
	var x;
	for(;;) {
		x = phone.exec(body);
		if(!x) break;
		results.push(x[0]);
	}
	return results;
}

function extract(URI, body) {
	var hashtag = /(?:^|[\s(])#([\w\d_-]{3,})\b/g;
	var keywords = /\bKeywords: ([^\r\n]*)\b/g;
	var keyword = /([^,]{3,})(, )?/g;
	var topic = parsetopic(body);
	var meta = {};
	meta.hashtag = {};
	meta.keyword = {};
	meta.topic = {};
	if(topic) meta.topic[topic] = {};
	meta.date = array2obj(parsedates(body));
	meta.phone = array2obj(parsephonenumbers(body));
	var x, y;
	for(;;) {
		x = hashtag.exec(body);
		if(!x) break;
		if(/^\d*$/.test(x[1])) continue; // Exclude e.g. GitHub issue IDs #560
		meta.hashtag[x[1]] = {};
	}
	for(;;) {
		x = keywords.exec(body);
		if(!x) break;
		keyword.lastIndex = 0;
		for(;;) {
			y = keyword.exec(x[1]);
			if(!y) break;
			meta.keyword[y[1]] = {};
		}
	}
	// TODO: We shouldn't expose my personal publication logic like this.
	if("StrongLink" === topic ||
	   "EarthFS" === topic ||
	   "EarthFS TODO" === topic ||
	   has(meta.hashtag, "earthfs") ||
	   has(meta.hashtag, "notetaking") ||
	   whitelist[URI])
	{
		if(!has(meta.keyword, "private") &&
		   !has(meta.hashtag, "private") &&
		   !has(meta.hashtag, "personal_journal") &&
		   !any(meta.phone) &&
		   !blacklist[URI])
		{
			meta.visibility = "public";
		}
	}
	return meta;
}
function fakemeta(body) {
	var fakemeta = /^(hash:[\S]+)[\r\n]+([+-] #[\w\d_-]{3,}[\r\n]*)+$/;
	var change = /([+-]) #([\w\d_-]{3,})\b/g;
	var x = fakemeta.exec(body);
	if(!x) return null;
	var target = x[1];
	var meta = {
		hashtag: {},
	};
	change.lastIndex = target.length;
	for(;;) {
		x = change.exec(body);
		if(!x) break;
		if("+" === x[1]) meta.hashtag[x[2]] = {}; // ignore removals
	}
	return { target: target, meta: meta };
}

var stream = repo.createQueryStream("", { wait: false });
stream.on("data", function(URI) {
	stream.pause();
	var req = repo.createFileRequest(URI, {});
	req.on("response", function(res) {
		if(200 != res.statusCode) throw new Error("Status "+res.statusCode);

		// TODO: We don't accept type filters or content negotation yet...
		if(!texttype(res.headers["content-type"])) {
			res.resume(); // Drain
			stream.resume();
			return;
		}

		var body = "";
		res.setEncoding("utf8");
		res.on("data", function(chunk) {
			body += chunk;
		});
		res.on("end", function() {

			// DEBUG
			/*if(Math.random() < (100/8000)) {
			//	console.log("\n---");
				console.log("\n"+URI);
			//	console.log("\n"+body);
			//	console.log("\n");
				console.log(fakemeta(body) || extract(URI, body));
			}*/

			var obj = fakemeta(body);
			if(obj) {
				repo.submitMeta(URI, { "type": "fakemeta" }, {}, function(err) {
					if(err) throw err;
					repo.submitMeta(obj.target, obj.meta, {}, function(err) {
						if(err) throw err;
						stream.resume();
					});
				});
				return;
			}
			obj = extract(URI, body);
			repo.submitMeta(URI, obj, {}, function(err) {
				if(err) throw err;
				stream.resume();
			});

		});
	});
});

